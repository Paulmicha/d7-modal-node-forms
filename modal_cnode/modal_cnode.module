<?php

/**
 * @file modal_cnode.module
 * Provides modal page callbacks based on existing core 'node' module menu items
 * 
 * Research done beforehand :
 *  • modal_forms : no node forms
 *  • colorbox : no error handling, not designed for forms
 *  • colorbox_node : no node forms
 *  • ctools_automodal : incomplete, prohibitive bugs, virtually unmaintained, requires too much work
 *  • dialog + http://pixeljets.com/blog/improving-user-experience-using-dialogs-profile-edit-modal-forms : requires too much work, ajax file widgets broken...
 *  • http://drupion.com/blog/10-steps-creating-ctools-modal-window-drupal-7 : this is what I was aiming to generalize, seemed more robust.
 * 
 * update 2014/06/08 23:24:37 - I'm giving up because in my tests, widgets like file uploads / removals are broken,
 * and I'm guessing other "real-world" widgets used in node forms will be as well (ex: modules like 'asset' or 'inline_entity_form')
 * -> preferred method was the one I've already used in D6 - cf. module 'modalframe',
 * because in an iframe, maybe there will be less depressing surprises (and less time wasted)
 */

/**
 * Implements hook_menu().
 */
function modal_cnode_menu() {
  $items = array();
  
  // Based on core node module - method : for each core menu item,
  // we replace 'page callback' by our own 'wrappers' in charge of
  // adding CTools assets & dealing with JS degradation, and we add
  // an additional arg to retrieve the initial callback contents
  // for sending it back as ajax modal content or modal form.
  // @see modal_cnode_callback()
  //node_type_cache_reset();
  foreach (node_type_get_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['modal-node/%ctools_js/add/' . $type_url_str] = array(
      'title' => $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'modal_cnode_page_callback',
      'page arguments' => array(1, 'node_add', array($type->type), array(
        'file' => 'node.pages.inc',
        'title' => check_plain($type->name),
      )),
      'access callback' => 'node_access',
      'access arguments' => array('create', $type->type),
      'description' => $type->description,
      'type' => MENU_SUGGESTED_ITEM,
    );
  }
  $items['modal-node/%ctools_js/%node'] = array(
    'title callback' => 'node_page_title',
    'title arguments' => array(2),
    'page callback' => 'modal_cnode_page_callback',
    'page arguments' => array(1, 'node_page_view', array(2), array(
      'node_obj_pos' => 0,
    )),
    'access callback' => 'node_access',
    'access arguments' => array('view', 2),
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['modal-node/%ctools_js/%node/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'modal_cnode_page_callback',
    'page arguments' => array(1, 'node_page_edit', array(2), array(
      'file' => 'node.pages.inc',
      'node_obj_pos' => 0,
    )),
    'access callback' => 'node_access',
    'access arguments' => array('update', 2),
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['modal-node/%ctools_js/%node/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'modal_cnode_page_callback',
    'page arguments' => array(1, 'drupal_get_form', array('node_delete_confirm', 2), array(
      'file' => 'node.pages.inc',
      'node_obj_pos' => 1,
    )),
    'access callback' => 'node_access',
    'access arguments' => array('delete', 1),
    'type' => MENU_SUGGESTED_ITEM,
  );
  
  /**
  $items['modal-node/%ctools_js/%node/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['modal-node/%ctools_js/%node/revisions'] = array(
    'title' => 'Revisions',
    'page callback' => 'node_revision_overview',
    'page arguments' => array(1),
    'access callback' => '_node_revision_access',
    'access arguments' => array(1),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'node.pages.inc',
  );
  $items['modal-node/%ctools_js/%node/revisions/%/view'] = array(
    'title' => 'Revisions',
    'load arguments' => array(3),
    'page callback' => 'node_show',
    'page arguments' => array(1, TRUE),
    'access callback' => '_node_revision_access',
    'access arguments' => array(1),
  );
  $items['modal-node/%ctools_js/%node/revisions/%/revert'] = array(
    'title' => 'Revert to earlier revision',
    'load arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_revision_revert_confirm', 1),
    'access callback' => '_node_revision_access',
    'access arguments' => array(1, 'update'),
    'file' => 'node.pages.inc',
  );
  $items['modal-node/%ctools_js/%node/revisions/%/delete'] = array(
    'title' => 'Delete earlier revision',
    'load arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_revision_delete_confirm', 1),
    'access callback' => '_node_revision_access',
    'access arguments' => array(1, 'delete'),
    'file' => 'node.pages.inc',
  );
  /**/
  
  // debug
  //dsm($items);
  
  return $items;
}


/**
 * Node modal page callback "dispatcher"
 */
function modal_cnode_page_callback($js = FALSE, $original_callback = FALSE, $original_callback_args = array(), $options = array()) {
  // JS Degradation
  if (!$js) {
    $args = arg();
    array_shift($args);
    array_shift($args);
    drupal_goto('node/' . join('/',$args));
    exit;
  }
  
  // CTools assets
  ctools_include('modal');
  ctools_include('ajax');
  
  // Rushing here : assume any integer in original_callback_args is referring to a position in arg()
  foreach($original_callback_args as $i => $arg) {
    if (is_int($arg)) {
      $original_callback_args[$i] = arg($arg);
    }
  }
  
  // We need to transform '%node' from menu items into a node object
  // -> well, for now I'll just stuff the position in the $options with the 'node_obj_pos' key...
  // @todo other suggestions ?
  // @see modal_cnode_menu()
  if (isset($options['node_obj_pos'])) {
    $original_callback_args[$options['node_obj_pos']] = node_load($original_callback_args[$options['node_obj_pos']]);
  }
  
  // This page callback is a form
  // (rushing a bit - detecting forms is fugly now : $options['file'] == 'node.pages.inc' to detect node/add & node/edit...)
  if ($original_callback == 'drupal_get_form' ||
    (isset($options['file']) && $options['file'] == 'node.pages.inc')) {
    
    $output = array();
    $form_state = array();
    ctools_include('node.pages', 'node', '');
    
    // Node ADD forms :
    // special treatment required
    // (prepare $form_state)
    if ($original_callback == 'node_add') {
      
      // First arg, in this case, is the node content type
      $content_type = reset($original_callback_args);
      
      // Create a blank node object
      // @todo use entity_metadata_wrapper() instead ?
      // $e = entity_create('node', array('type' => $content_type));
      // $entity = entity_metadata_wrapper('node', $e);
      $node = (object) array(
        'uid' => $user->uid,
        'name' => (isset($user->name) ? $user->name : ''),
        'type' => $content_type,
        'language' => LANGUAGE_NONE,
      );
      $form_state = array(
        'title' => !empty($options['title']) ? $options['title'] : t('Add node'),
        'ajax' => TRUE,
        'build_info' => array(
          'args' => array($node),
        ),
      );
      $output = ctools_modal_form_wrapper($content_type .'_node_form', $form_state);
    }
    
    // Node EDIT forms :
    // special treatment required
    // (prepare $form_state)
    else if ($original_callback == 'node_page_edit') {
      
      // In this case, the node object is the first arg
      $node = reset($original_callback_args);
      
      $type_name = node_type_get_name($node);
      $title = t('<em>Edit @type</em> @title', array('@type' => $type_name, '@title' => $node->title));
      $form_state = array(
        'title' => $title,
        'ajax' => TRUE,
        'build_info' => array(
          'args' => array($node),
        ),
      );
      
      // @todo 2014/06/08 07:50:42 - actions aren't "ajaxified" :
      //  • drupal messages aren't displayed
      //  • preview doesn't work
      //  • delete doesn't work
      $output = ctools_modal_form_wrapper($node->type .'_node_form', $form_state, $node);
    }
    
    // Note : this is only tested for node delete as of 2014/06/08 08:41:11
    // "Generic" node forms
    // (delete & revision-related operations)
    else if ($original_callback == 'drupal_get_form') {
      
      // First arg, in this case, is the form_id
      $form_id = reset($original_callback_args);
      
      // Node is 2nd arg
      $node = $original_callback_args[1];
      
      // @todo 2014/06/08 08:42:26 - actions aren't "ajaxified" :
      //  • drupal messages aren't displayed
      //  • "cancel" link is wrong
      $form_state = array(
        'ajax' => TRUE,
        'build_info' => array(
          'args' => array($node),
        ),
      );
      $output = ctools_modal_form_wrapper($form_id, $form_state, $node);
    }
    
    // This should not happen
    // (throw exception ?)
    else {
      drupal_set_message(t("This URL is handled by the 'modal_cnode' module, but it is not corresponding to any implemented operation."), 'error');
      return '<p>'. t("Something went wrong : that's all we know.") .'</p>';
    }
    
    // Form has been exectued
    if (!empty($form_state['executed'])) {
      // We'll just overwrite the form output if it was successful.
      $output = array();
      ctools_add_js('ajax-responder');
      $output[] = ctools_modal_command_dismiss(t('Success'));
      
      // Follow destination if it was provided
      if (isset($_GET['destination'])) {
        $output[] = ctools_ajax_command_redirect($_GET['destination']);
      }
      
      // If there are messages for the form, render them.
      // @todo 2014/06/08 20:33:00 - need a placeholder for messages on parent page...
      else if ($messages = theme('status_messages')) {
        //$output[] = ajax_command_html('#messages', $messages);
        $output[] = ajax_command_html('#breadcrumb', $messages);
      }
    }
    
    // Offer an opportunity for other modules to alter
    // the modal node forms' ajax render array
    // (will call all modules implementing hook_modal_cnode_forms_output_alter)
    drupal_alter('modal_cnode_forms_output', $output);
    
    // All modal forms share this
    print ajax_render($output);
    exit;
  }
  
  // This is a page without a node-related form in it
  else {
    $output = '';
    
    // This is ugly. Oh well. Up to 4 args supported for now...
    $nb_args = count($original_callback_args);
    switch($nb_args)
    {
      case 4:
        $arg4 = $original_callback_args[3];
        $arg3 = $original_callback_args[2];
        $arg2 = $original_callback_args[1];
        $arg1 = $original_callback_args[0];
        $output = $original_callback($arg1, $arg2, $arg3, $arg4);
        break;
      case 3:
        $arg3 = $original_callback_args[2];
        $arg2 = $original_callback_args[1];
        $arg1 = $original_callback_args[0];
        $output = $original_callback($arg1, $arg2, $arg3);
        break;
      case 2:
        $arg2 = $original_callback_args[1];
        $arg1 = $original_callback_args[0];
        $output = $original_callback($arg1, $arg2);
        break;
      case 1:
        $arg1 = $original_callback_args[0];
        $output = $original_callback($arg1);
        break;
      default:
        $output = $original_callback();
        break;
    }
    return ctools_modal_render(!empty($options['title']) ? $options['title'] : '', $output);
  }
}


/**
 * Core l() wrapper :
 * produce CTools links that use 'modal_mstyle' if enabled
 * @todo use a variable to make preferred modal style configurable
 */
function l_modal_cnode($text, $path, array $options = array()) {
  // We need at least the class 'ctools-use-modal'
  $options['attributes']['class'][] = 'ctools-use-modal';
  // Use our own modal style module if enabled
  if (module_exists('modal_mstyle')) {
    $options['attributes']['class'][] = 'ctools-modal-modal-popup-minimal';
  }
  return l($text, $path, $options);
}

